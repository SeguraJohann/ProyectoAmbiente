@{
    ViewData["Title"] = "Lector de PDF";
    var documento = ViewBag.Documento as ProyectoAmbiente.Models.DocumentoPDF;
    var progreso = ViewBag.Progreso as ProyectoAmbiente.Models.ProgresoMecanografia;
}

<style>

    /* Estilos para el texto a transcribir */
    #textoATranscribir {
        transition: background-color 0.3s ease;
    }

    #contenidoTranscripcion {
        line-height: 1.5;
        max-height: 150px;
        overflow-y: auto;
    }

    .badge-success {
        background-color: var(--success-color);
        color: white;
    }

    .badge-warning {
        background-color: var(--warning-color);
        color: white;
    }

    .badge-danger {
        background-color: var(--danger-color);
        color: white;
    }

</style>


<!-- MAIN CONTENT -->
<div class="container-fluid">
    <div id="progresoData" style="display: none;">
        @Html.Raw(Json.Serialize(new
            {
                paginaActual = progreso?.PaginaActual ?? 1,
                fragmentoContexto = progreso?.FragmentoContexto ?? "",
                porcentajeCompletado = progreso?.PorcentajeCompletado ?? 0
            }))
    </div>
    @if (TempData["Message"] != null)
    {
        <div class="alert @TempData["AlertType"]">
            @TempData["Message"]
        </div>
    }
    <div style="display: flex; gap: var(--spacing-lg);">

        <!-- Columna izquierda: Área principal de lectura -->
        <div style="flex: 3; height: 80vh;">
            <iframe id="pdfViewer" src="~/lib/pdfjs/web/viewer.html?file=/PDFAdmin/ObtenerPDF/@documento.Id"
                    style="width: 100%; height: 100%; border: none;"></iframe>
        </div>

        <!-- Columna derecha: Notas y estadísticas -->
        <div style="flex: 1;">
            <!-- Notas del usuario -->
            <div class="card" style="background-color: var(--neutral-800); box-shadow: var(--shadow-lg); margin-bottom: var(--spacing-lg);">
                <div class="card-header" style="border-bottom: 1px solid var(--neutral-700); color: var(--neutral-100);">
                    Notas
                </div>
                <div class="card-body">
                    <div class="form-group">
                        <textarea id="userNotes" class="form-control" rows="10" placeholder="Escriba sus notas aquí..."
                                  style="background-color: var(--neutral-700); border-color: var(--neutral-600); color: var(--neutral-200); resize: none;"></textarea>
                    </div>
                    <!-- feedback -->
                    <div id="textoATranscribir" class="mt-3 p-3 border rounded" style="background-color: var(--neutral-700); color: var(--neutral-200);">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h6 class="m-0">Texto a transcribir:</h6>
                        </div>
                        <div id="contenidoTranscripcion" style="font-family: monospace; white-space: pre-wrap;"></div>
                    </div>
                    <div class="action-center">
                        <button id="btnSaveProgress" class="btn btn-primary">Guardar progreso</button>
                    </div>
                </div>
            </div>

            <!-- Estadísticas -->
            <div class="card" style="background-color: var(--neutral-800); box-shadow: var(--shadow-lg);">
                <div class="card-header" style="border-bottom: 1px solid var(--neutral-700); color: var(--neutral-100);">
                    Estadísticas de lectura
                </div>
                <div class="card-body">
                    <div style="display: flex; gap: var(--spacing-md);">
                        <!-- Progreso -->
                        <div style="flex: 1;">
                            <div class="card" style="background-color: var(--neutral-700); box-shadow: var(--shadow-sm);">
                                <div class="card-body" style="text-align: center;">
                                    <p style="color: var(--neutral-300); font-size: var(--font-size-sm); margin-bottom: var(--spacing-xs);">Progreso</p>
                                    <p id="progresoLectura" style="color: var(--primary-color); font-size: var(--font-size-2xl); font-weight: bold; margin: 0;">
                                        @(progreso?.PorcentajeCompletado.ToString("F0") ?? "0")%
                                    </p>
                                </div>
                            </div>
                        </div>

                        <!-- Promedio de caracteres -->
                        <div style="flex: 1;">
                            <div class="card" style="background-color: var(--neutral-700); box-shadow: var(--shadow-sm);">
                                <div class="card-body" style="text-align: center;">
                                    <p style="color: var(--neutral-300); font-size: var(--font-size-sm); margin-bottom: var(--spacing-xs);">CPM</p>
                                    <p id="caracteresMinuto" style="color: var(--secondary-color); font-size: var(--font-size-2xl); font-weight: bold; margin: 0;">
                                        0
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Alertas -->
                    <div class="alert" style="margin-top: var(--spacing-md); padding: var(--spacing-md); border-radius: var(--border-radius-sm); border-left: 4px solid var(--info-color); background-color: rgba(52, 152, 219, 0.1); color: var(--info-color);">
                        <strong>Consejo:</strong> Toma descansos cada 25 minutos para mayor retención.
                    </div>
                </div>
                <div class="card-footer" style="background-color: var(--neutral-700); border-top: 1px solid var(--neutral-600);">
                    <span id="estadoGuardado" class="badge badge-primary">Guardado</span>
                    <span id="ultimaActualizacion" class="badge badge-neutral">Última actualización: @(progreso != null ? $"{(DateTime.Now - progreso.UltimaActualizacion).Minutes} min" : "Nunca")</span>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @* Asegúrate de incluir el token antiforgery para las peticiones AJAX *@
    @Html.AntiForgeryToken()

    <script>
        // Variables globales
        const documentoId = @documento.Id;
        const documentoNumPaginas = @documento.NumPaginas;
        // Variables para el manejo del texto del PDF
        let pdfTexto = {}; // Almacenará el texto extraído de cada página
        let paginaActualTexto = ""; // Texto de la página actual
        let ultimoFragmentoTranscrito = ""; // Último fragmento transcrito
        let ultimoIndiceTranscrito = 0; // Posición del último carácter transcrito
        let comparacionActiva = false; // Si está activa la comparación de texto
        let ultimoCaracterEsperado = ""; // El próximo carácter que se espera que el usuario escriba
        let maxCaracteresTextarea = 1000; // Máximo de caracteres a mantener en el textarea

        // Contador de tiempo de lectura
        let tiempoInicio = new Date();
        let contadorCaracteres = 0;
        let actualizandoCPM = false;


        // Función para extraer texto del PDF
        function extraerTextoPDF() {
            // Obtener referencia al iframe del PDF
            const pdfIframe = document.querySelector('iframe');

            if (!pdfIframe) {
                console.error('No se encontró el iframe del visor PDF');
                return;
            }

            // Función que verifica si el visor está listo
            const verificarCargaCompleta = function () {
                return new Promise((resolve) => {
                    let intentos = 0;
                    const maxIntentos = 30; // 30 segundos máximo de espera

                    const comprobar = setInterval(() => {
                        try {
                            // Verificar si podemos acceder al iframe
                            if (pdfIframe.contentDocument) {
                                // Verificar si los elementos clave están disponibles
                                const app = pdfIframe.contentWindow.PDFViewerApplication;

                                // Si el visor parece estar listo y el documento PDF está cargado
                                if (app && app.pdfDocument) {
                                    clearInterval(comprobar);
                                    resolve(app.pdfDocument);
                                    return;
                                }
                            }
                        } catch (e) {
                            console.log("Aún esperando a que el PDF esté listo...", e);
                        }

                        intentos++;
                        if (intentos >= maxIntentos) {
                            clearInterval(comprobar);
                            console.error('Tiempo de espera agotado para cargar el visor PDF');
                            resolve(null);
                        }
                    }, 1000); // Verificar cada segundo
                });
            };

            // Esperar a que el visor esté listo y extraer el texto
            verificarCargaCompleta().then(async (pdfDocument) => {
                if (!pdfDocument) {
                    console.error('No se pudo obtener el documento PDF');
                    return;
                }

                // Extraer texto de todas las páginas
                const numPaginas = pdfDocument.numPages;
                console.log(`El documento tiene ${numPaginas} páginas`);

                // Obtener el texto página por página
                for (let i = 1; i <= numPaginas; i++) {
                    try {
                        const pagina = await pdfDocument.getPage(i);
                        const contenido = await pagina.getTextContent();
                        const textoItems = contenido.items.map(item => item.str);
                        const textoCompleto = textoItems.join(' ');
                        pdfTexto[i] = textoCompleto;
                        console.log(`Texto extraído de la página ${i} (primeros 100 caracteres): ${textoCompleto.substring(0, 100)}...`);
                    } catch (error) {
                        console.error(`Error al extraer texto de la página ${i}:`, error);
                        pdfTexto[i] = "";
                    }
                }

                // Establecer el texto de la página actual
                actualizarTextoPaginaActual();

                // Si hay un fragmento de contexto, buscar posición para continuar
                const fragmentoContexto = "@(progreso?.FragmentoContexto ?? "")";
                if (fragmentoContexto && fragmentoContexto.trim() !== '') {
                    encontrarPosicionContinuacion(fragmentoContexto);
                }
                // Mostrar el texto a transcribir
                mostrarTextoATranscribir();
            });
        }

        // Función para comparar el texto que escribe el usuario con el texto del PDF
        function compararTextoUsuario(textoUsuario) {
            if (!comparacionActiva || !paginaActualTexto) return;

            // Obtener el último carácter escrito
            const ultimoCaracterEscrito = textoUsuario.length > 0 ? textoUsuario.charAt(textoUsuario.length - 1) : "";

            // Si no hay caracteres escritos, salir
            if (!ultimoCaracterEscrito) return;

            // Verificar precisión del último carácter
            verificarPrecisionUltimoCaracter(ultimoCaracterEscrito);

            // Limitar el tamaño del texto en el textarea
            limitarTextoTextarea();

            // Si es el carácter correcto, actualizar el índice y mostrar el siguiente texto
            if (ultimoCaracterEscrito === ultimoCaracterEsperado) {
                ultimoIndiceTranscrito++;
                actualizarUltimoFragmentoTranscrito();
                mostrarTextoATranscribir();
                actualizarBusquedaPDF();
            }
        }

        // Función para actualizar el último fragmento transcrito
        function actualizarUltimoFragmentoTranscrito() {
            if (paginaActualTexto && ultimoIndiceTranscrito > 0) {
                // Tomar los últimos 50 caracteres como fragmento de contexto
                const inicioFragmento = Math.max(0, ultimoIndiceTranscrito - 50);
                ultimoFragmentoTranscrito = paginaActualTexto.substring(
                    inicioFragmento,
                    ultimoIndiceTranscrito
                );
            }
        }

        // Función para limitar el texto en el textarea
        function limitarTextoTextarea() {
            const textarea = document.getElementById('userNotes');
            if (textarea && textarea.value.length > maxCaracteresTextarea) {
                // Conservar solo los últimos 'maxCaracteresTextarea' caracteres
                textarea.value = textarea.value.substring(
                    textarea.value.length - maxCaracteresTextarea
                );

                // Opcionalmente, mover el cursor al final
                textarea.selectionStart = textarea.value.length;
                textarea.selectionEnd = textarea.value.length;
            }
        }

        // Función para verificar la precisión del último carácter escrito
        function verificarPrecisionUltimoCaracter(caracterEscrito) {
            if (!paginaActualTexto || !comparacionActiva) return;

            // Determinar el carácter esperado
            if (ultimoIndiceTranscrito < paginaActualTexto.length) {
                ultimoCaracterEsperado = paginaActualTexto.charAt(ultimoIndiceTranscrito);
            } else {
                // Si hemos llegado al final del texto actual
                ultimoCaracterEsperado = "";
            }

            // Verificar si coincide con el carácter esperado
            const esCaracterCorrecto = caracterEscrito === ultimoCaracterEsperado;

            // Contenedor de texto a transcribir
            const contenedorTexto = document.getElementById('textoATranscribir');

            // Mostrar feedback visual según la precisión
            if (contenedorTexto) {
                if (esCaracterCorrecto) {
                    contenedorTexto.style.backgroundColor = 'rgba(40, 167, 69, 0.2)'; // Verde con opacidad
                    contenedorTexto.style.borderColor = 'var(--success-color)';
                } else {
                    contenedorTexto.style.backgroundColor = 'rgba(220, 53, 69, 0.2)'; // Rojo con opacidad
                    contenedorTexto.style.borderColor = 'var(--danger-color)';

                    // Opcional: resaltar en rojo el textarea para indicar error
                    const textarea = document.getElementById('userNotes');
                    if (textarea) {
                        textarea.style.border = '2px solid var(--danger-color)';

                        // Restaurar después de 1 segundo
                        setTimeout(() => {
                            textarea.style.border = '';
                        }, 1000);
                    }
                }

                // Restaurar el estilo después de 1 segundo
                setTimeout(() => {
                    contenedorTexto.style.backgroundColor = 'var(--neutral-700)';
                    contenedorTexto.style.borderColor = 'var(--neutral-600)';
                }, 1000);
            }

            return esCaracterCorrecto;
        }

        // Función para actualizar el texto de la página actual
        function actualizarTextoPaginaActual() {
            try {
                const pdfIframe = document.getElementById('pdfViewer');
                if (pdfIframe && pdfIframe.contentWindow && pdfIframe.contentWindow.PDFViewerApplication) {
                    const paginaActual = pdfIframe.contentWindow.PDFViewerApplication.page || 1;
                    paginaActualTexto = pdfTexto[paginaActual] || "";
                    console.log(`Texto actualizado para la página ${paginaActual}`);

                    // Actualizar interfaz o marcadores si es necesario
                    resaltarTextoTranscrito();

                    // Actualizar texto a transcribir
                    mostrarTextoATranscribir();
                }
            } catch (e) {
                console.error("Error al actualizar texto de la página actual:", e);
            }
        }

        // Función para encontrar la posición de continuación basada en el fragmento de contexto
        function encontrarPosicionContinuacion(fragmento) {
            // Obtener la página actual
            const paginaActual = @(progreso?.PaginaActual ?? 1);
            const textoActual = pdfTexto[paginaActual] || "";

            if (textoActual && fragmento) {
                const indice = textoActual.indexOf(fragmento);
                if (indice >= 0) {
                    // Encontrado el fragmento, establecer la posición para continuar
                    ultimoFragmentoTranscrito = fragmento;
                    ultimoIndiceTranscrito = indice + fragmento.length;
                    console.log(`Continuando desde: "${fragmento}" (posición ${ultimoIndiceTranscrito})`);

                    // Resaltar el texto ya transcrito
                    resaltarTextoTranscrito();

                    // Mostrar al usuario dónde continuar
                    const textoContinuacion = textoActual.substring(ultimoIndiceTranscrito, ultimoIndiceTranscrito + 100);
                    console.log(`Texto a transcribir a continuación: "${textoContinuacion}..."`);

                    // Opcional: mostrar en la interfaz un mensaje de continuación
                    mostrarMensajeContinuacion(textoContinuacion);
                } else {
                    console.warn(`No se encontró el fragmento "${fragmento}" en la página ${paginaActual}`);
                }
            }
        }

        // Función para resaltar visualmente el texto ya transcrito
        function resaltarTextoTranscrito() {
            // Esta función podría implementarse en futuras versiones para
            // resaltar visualmente el texto ya transcrito en el PDF
            // Por ahora, solo imprimimos un mensaje en consola
            if (ultimoFragmentoTranscrito) {
                console.log(`Texto ya transcrito hasta: "${ultimoFragmentoTranscrito}"`);
            }
        }

        // Función para mostrar un mensaje de continuación al usuario
        function mostrarMensajeContinuacion(textoContinuacion) {
            // Mostrar un mensaje temporal al usuario con el texto que debe continuar transcribiendo
            const notasTextarea = document.getElementById('userNotes');

            // Añadir mensaje temporal
            const mensajeTemp = document.createElement('div');
            mensajeTemp.className = 'alert alert-info mt-2';
            mensajeTemp.innerHTML = `
                                <p><strong>Continúa transcribiendo:</strong></p>
                                <p class="text-muted">${textoContinuacion}...</p>
                            `;

            // Insertar después del textarea
            const contenedorNotas = notasTextarea.parentNode;
            if (contenedorNotas.querySelector('.alert-info')) {
                contenedorNotas.querySelector('.alert-info').remove();
            }
            contenedorNotas.appendChild(mensajeTemp);

            // Eliminar después de 10 segundos
            setTimeout(() => {
                if (mensajeTemp.parentNode) {
                    mensajeTemp.parentNode.removeChild(mensajeTemp);
                }
            }, 10000);
        }

        // Función para guardar el progreso
        function guardarProgreso() {
            // Obtener la página actual del iframe
            let paginaActual = 1;
            try {
                const pdfFrame = document.getElementById('pdfViewer');
                if (pdfFrame && pdfFrame.contentWindow && pdfFrame.contentWindow.PDFViewerApplication) {
                    // Verificar que la aplicación PDF.js esté inicializada y tenga una propiedad 'page'
                    if (pdfFrame.contentWindow.PDFViewerApplication.page) {
                        paginaActual = pdfFrame.contentWindow.PDFViewerApplication.page;
                    } else {
                        console.warn("PDFViewerApplication.page no está disponible, usando valor predeterminado");
                    }
                } else {
                    console.warn("No se pudo acceder a PDFViewerApplication, usando valor predeterminado");
                }
            } catch (e) {
                console.error("Error al obtener la página actual:", e);
            }

            // Calcular porcentaje de progreso basado en la posición del texto
            let porcentaje = 0;
            if (paginaActualTexto && paginaActualTexto.length > 0) {
                // Porcentaje dentro de la página actual
                const porcentajePagina = (ultimoIndiceTranscrito / paginaActualTexto.length) * 100;

                // Porcentaje global considerando todas las páginas
                porcentaje = Math.round(((paginaActual - 1) * 100 + porcentajePagina) / documentoNumPaginas);

                // Limitar a 100%
                porcentaje = Math.min(porcentaje, 100);
            }

            // Actualizar el indicador de progreso en la interfaz
            document.getElementById('progresoLectura').innerText = `${porcentaje}%`;

            // Extraer el fragmento de contexto (texto a transcribir a continuación)
            let fragmentoContexto = "";

            // Obtener el texto correcto del PDF
            if (paginaActualTexto && ultimoIndiceTranscrito > 0) {
                // Tomar los últimos 50 caracteres antes de la posición actual como fragmento de contexto
                const inicioFragmento = Math.max(0, ultimoIndiceTranscrito - 50);
                fragmentoContexto = paginaActualTexto.substring(
                    inicioFragmento,
                    ultimoIndiceTranscrito
                );
            }

            console.log(`Guardando progreso: Página ${paginaActual}, Fragmento: "${fragmentoContexto}"`);

            // Preparar los datos para enviar
            const formData = new FormData();
            formData.append('documentoId', documentoId);
            formData.append('paginaActual', paginaActual);
            formData.append('indiceCaracter', ultimoIndiceTranscrito);
            formData.append('posicionX', 0);
            formData.append('posicionY', 0);
            formData.append('elementoId', 'default');
            formData.append('fragmentoContexto', fragmentoContexto);
            formData.append('porcentajeCompletado', porcentaje);
            formData.append('textoCompletado', " "); // Espacio en blanco en lugar de cadena vacía para evitar NULL

            // Obtener el token antiforgery
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            // Enviar los datos al servidor
            fetch('/PDFAdmin/GuardarProgreso', {
                method: 'POST',
                body: formData,
                headers: {
                    'RequestVerificationToken': token
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        document.getElementById('estadoGuardado').innerText = 'Guardado';
                        document.getElementById('ultimaActualizacion').innerText = 'Última actualización: ahora';
                    } else {
                        console.error('Error al guardar:', data.message);
                        document.getElementById('estadoGuardado').innerText = 'Error al guardar';
                    }
                })
                .catch(error => {
                    console.error('Error en la petición:', error);
                    document.getElementById('estadoGuardado').innerText = 'Error al guardar';
                });
        }


        // Actualizar CPM (Caracteres por minuto)
        function actualizarCPM() {
            if (actualizandoCPM) return;

            actualizandoCPM = true;
            const ahora = new Date();
            const minutos = (ahora - tiempoInicio) / 60000; // Convertir ms a minutos

            if (minutos > 0) {
                const cpm = Math.round(contadorCaracteres / minutos);
                document.getElementById('caracteresMinuto').innerText = cpm;
            }

            actualizandoCPM = false;
        }

        // Función para actualizar la búsqueda en el PDF en tiempo real
        function actualizarBusquedaPDF() {
            // Solo actualizar si tenemos un fragmento de texto
            if (!ultimoFragmentoTranscrito || ultimoFragmentoTranscrito.trim() === '') {
                return;
            }

            // Obtener la página actual
            try {
                const pdfFrame = document.getElementById('pdfViewer');
                if (pdfFrame && pdfFrame.contentWindow && pdfFrame.contentWindow.PDFViewerApplication) {
                    // Buscar el texto en el PDF actual
                    const fragmentoABuscar = ultimoFragmentoTranscrito.substring(Math.max(0, ultimoFragmentoTranscrito.length - 30));
                    console.log(`Buscando en tiempo real: "${fragmentoABuscar}"`);

                    // Usar nuestra función de búsqueda
                    buscarEnPDF(fragmentoABuscar);
                }
            } catch (e) {
                console.warn("No se pudo actualizar la búsqueda en el PDF:", e);
            }
        }

        // Función para establecer el atributo hidden en el findbar de manera permanente
        function establecerFindbarOculto() {
            // Función que verifica y modifica el findbar
            function verificarYModificarFindbar() {
                const pdfIframe = document.querySelector('iframe');
                if (!pdfIframe || !pdfIframe.contentDocument) {
                    return false; // El iframe aún no está disponible
                }

                try {
                    // Obtener la barra de búsqueda
                    const findbar = pdfIframe.contentDocument.getElementById('findbar');
                    if (findbar) {
                        // Establecer el atributo hidden
                        findbar.setAttribute('hidden', '');

                        // También podemos aplicar CSS adicional para asegurarnos
                        findbar.style.display = 'none !important';
                        findbar.style.visibility = 'hidden';

                        console.log('Findbar establecido como oculto permanentemente');

                        // Crear un MutationObserver para mantenerlo oculto
                        const observer = new MutationObserver((mutations) => {
                            // Si se elimina el atributo hidden, volver a aplicarlo
                            if (!findbar.hasAttribute('hidden')) {
                                findbar.setAttribute('hidden', '');
                                findbar.style.display = 'none !important';
                                findbar.style.visibility = 'hidden';
                            }
                        });

                        // Observar cambios en atributos
                        observer.observe(findbar, {
                            attributes: true,
                            attributeFilter: ['hidden', 'class', 'style']
                        });

                        return true; // Éxito
                    }
                    return false; // Findbar aún no existe
                } catch (error) {
                    console.error('Error al modificar findbar:', error);
                    return false;
                }
            }

            // Intentar modificar inmediatamente
            if (verificarYModificarFindbar()) {
                return; // Si tuvo éxito, salir
            }

            // Si no tuvo éxito, configurar un intervalo para seguir intentando
            let intentos = 0;
            const maxIntentos = 20; // Máximo número de intentos

            const intervalo = setInterval(() => {
                intentos++;
                if (verificarYModificarFindbar() || intentos >= maxIntentos) {
                    clearInterval(intervalo);
                    if (intentos >= maxIntentos) {
                        console.warn('No se pudo ocultar el findbar después de múltiples intentos');
                    }
                }
            }, 500); // Verificar cada 500ms
        }

        // Función más simple para buscar en el PDF (sin esperar polling)
        // Modificar la función buscarEnPDF para devolver el foco al textarea
        function buscarEnPDF(texto) {
            if (!texto || texto.trim() === '') {
                return;
            }

            const pdfIframe = document.querySelector('iframe');
            if (!pdfIframe || !pdfIframe.contentDocument) {
                return;
            }

            // Guardar referencia al textarea para restaurar el foco después
            const textarea = document.getElementById('userNotes');

            try {
                // Verificar si los elementos clave están disponibles
                const findButton = pdfIframe.contentDocument.getElementById('viewFindButton');
                const findInput = pdfIframe.contentDocument.getElementById('findInput');

                if (!findButton || !findInput) {
                    return;
                }

                // Si la búsqueda aún no está abierta, abrirla
                const findbar = pdfIframe.contentDocument.getElementById('findbar');
                if (findbar && !findbar.classList.contains('visible')) {
                    findButton.click();
                }

                // Establecer el texto de búsqueda
                findInput.value = texto;

                // Disparar evento de entrada para activar la búsqueda
                const inputEvent = new Event('input', { bubbles: true });
                findInput.dispatchEvent(inputEvent);

                // Buscar el siguiente resultado
                setTimeout(() => {
                    const findNextButton = pdfIframe.contentDocument.getElementById('findNextButton');
                    if (findNextButton) {
                        findNextButton.click();

                        // Devolver el foco al textarea después de un breve retraso
                        setTimeout(() => {
                            if (textarea) {
                                textarea.focus();

                                // Opcional: mover el cursor al final del texto
                                const len = textarea.value.length;
                                textarea.setSelectionRange(len, len);
                            }
                        }, 150);
                    }
                }, 100);
            } catch (error) {
                console.error('Error al realizar la búsqueda en tiempo real:', error);
                // Asegurar que el foco vuelva al textarea incluso si hay error
                if (textarea) textarea.focus();
            }
        }

        // Función para buscar en el PDF cuando esté listo
        function buscarEnPDFCuandoEsteListoEsperaPolling(texto, pagina = null) {
            // Obtener referencia al iframe
            const pdfIframe = document.querySelector('iframe');

            if (!pdfIframe) {
                console.error('No se encontró el iframe del visor PDF');
                return;
            }

            // Función que verificará si el visor está listo
            const verificarCargaCompleta = function () {
                return new Promise((resolve) => {
                    let intentos = 0;
                    const maxIntentos = 30; // 30 segundos máximo de espera

                    const comprobar = setInterval(() => {
                        try {
                            // Verificar si podemos acceder al iframe
                            if (pdfIframe.contentDocument) {
                                // Verificar si los elementos clave están disponibles
                                const app = pdfIframe.contentWindow.PDFViewerApplication;
                                const findbtn = pdfIframe.contentDocument.getElementById('viewFindButton');
                                const pageInput = pdfIframe.contentDocument.getElementById('pageNumber');

                                // Si el visor parece estar listo
                                if (app && app.pdfDocument && findbtn && pageInput) {
                                    clearInterval(comprobar);
                                    resolve(true);
                                    return;
                                }
                            }
                        } catch (e) {
                            console.log("Aún esperando...", e);
                        }

                        intentos++;
                        if (intentos >= maxIntentos) {
                            clearInterval(comprobar);
                            console.error('Tiempo de espera agotado para cargar el visor PDF');
                            resolve(false);
                        }
                    }, 1000); // Verificar cada segundo
                });
            };

            // Esperar a que el visor esté listo y luego realizar la búsqueda
            verificarCargaCompleta().then(listo => {
                if (listo) {
                    console.log('Visor PDF listo. Iniciando búsqueda...');

                    try {
                        // Ir a la página especificada si se proporciona
                        if (pagina !== null) {
                            const pageInput = pdfIframe.contentDocument.getElementById('pageNumber');
                            pageInput.value = pagina;

                            // Crear y disparar un evento de cambio
                            const changeEvent = new Event('change', { bubbles: true });
                            pageInput.dispatchEvent(changeEvent);

                            // Dar tiempo para que se cargue la página
                            setTimeout(() => realizarBusqueda(), 500);
                        } else {
                            realizarBusqueda();
                        }

                        // Función para realizar la búsqueda
                        function realizarBusqueda() {
                            // Si no hay texto que buscar, salimos
                            if (!texto || texto.trim() === '') {
                                console.log('No hay texto que buscar');
                                return;
                            }

                            // 1. Abrir la barra de búsqueda
                            const findButton = pdfIframe.contentDocument.getElementById('viewFindButton');
                            findButton.click();

                            // 2. Esperar a que la barra de búsqueda esté visible
                            setTimeout(() => {
                                // 3. Establecer el texto de búsqueda
                                const findInput = pdfIframe.contentDocument.getElementById('findInput');
                                findInput.value = texto;

                                // 4. Disparar evento de entrada para activar la búsqueda
                                const inputEvent = new Event('input', { bubbles: true });
                                findInput.dispatchEvent(inputEvent);

                                // 5. Esperar a que se procese la búsqueda y hacer clic en "Siguiente"
                                setTimeout(() => {
                                    const findNextButton = pdfIframe.contentDocument.getElementById('findNextButton');
                                    findNextButton.click();

                                    console.log(`Búsqueda completada para: "${texto}"`);
                                }, 300);
                            }, 300);
                        }

                    } catch (error) {
                        console.error('Error al realizar la búsqueda:', error);
                    }
                } else {
                    console.error('No se pudo iniciar la búsqueda porque el visor PDF no está listo');
                }
            });
        }

        // Función para restaurar la posición del usuario
        function restaurarPosicionLectura() {
            // Obtener datos del progreso desde las variables de Razor
            const paginaActual = @(progreso?.PaginaActual ?? 1);
            const fragmentoContexto = "@(progreso?.FragmentoContexto ?? "")";

            // Verificar si tenemos un fragmento de contexto y página para buscar
            if (fragmentoContexto && fragmentoContexto.trim() !== '') {
                console.log(`Restaurando posición: Página ${paginaActual}, Texto: "${fragmentoContexto}"`);

                // Buscar el fragmento en la página correspondiente
                buscarEnPDFCuandoEsteListoEsperaPolling(fragmentoContexto, paginaActual);
            } else if (paginaActual > 1) {
                // Si no hay fragmento pero hay una página guardada, ir a esa página
                console.log(`Restaurando posición: Página ${paginaActual}`);
                buscarEnPDFCuandoEsteListoEsperaPolling("", paginaActual);
            } else {
                console.log('No hay suficiente información para restaurar la posición');
            }
        }

        // Función para mostrar el texto que debe transcribirse a continuación
        function mostrarTextoATranscribir() {
            if (!paginaActualTexto) {
                console.warn("No hay texto disponible para mostrar");
                return;
            }

            // Obtener el contenedor donde mostraremos el texto
            const contenedor = document.getElementById('contenidoTranscripcion');
            if (!contenedor) return;

            // Determinar qué texto mostrar a continuación
            let textoSiguiente = "";

            if (ultimoIndiceTranscrito >= 0 && ultimoIndiceTranscrito < paginaActualTexto.length) {
                // Mostrar los siguientes 200 caracteres después del último transcrito
                textoSiguiente = paginaActualTexto.substring(
                    ultimoIndiceTranscrito,
                    Math.min(ultimoIndiceTranscrito + 200, paginaActualTexto.length)
                );

                // Establecer el próximo carácter esperado
                if (textoSiguiente.length > 0) {
                    ultimoCaracterEsperado = textoSiguiente.charAt(0);
                }
            } else {
                // Si no tenemos posición de inicio, mostrar los primeros 200 caracteres
                textoSiguiente = paginaActualTexto.substring(0, 200);

                // Establecer el primer carácter como el esperado
                if (textoSiguiente.length > 0) {
                    ultimoCaracterEsperado = textoSiguiente.charAt(0);
                }
            }

            // Limpiar cualquier contenido anterior
            contenedor.innerHTML = '';

            // Mostrar el texto a transcribir con formato
            contenedor.textContent = textoSiguiente;

            console.log("Texto a transcribir actualizado");
        }

        // Event listeners
        document.addEventListener('DOMContentLoaded', function () {
            // Botón para guardar progreso
            document.getElementById('btnSaveProgress').addEventListener('click', guardarProgreso);

            // Contador de caracteres en las notas y comparación con el texto del PDF
            document.getElementById('userNotes').addEventListener('input', function (e) {
                contadorCaracteres = e.target.value.length;
                actualizarCPM();

                // Actualizar estado de guardado
                document.getElementById('estadoGuardado').innerText = 'Sin guardar';

                // Comparar texto del usuario con el PDF
                compararTextoUsuario(e.target.value);
            });

            // Actualizar CPM cada 30 segundos
            setInterval(actualizarCPM, 30000);

            // Intentar comunicarse con el iframe cuando esté cargado
            const pdfFrame = document.getElementById('pdfViewer');
            pdfFrame.onload = function () {
                try {
                    // Extraer texto del PDF cuando esté cargado
                    setTimeout(extraerTextoPDF, 1000);

                    // Ocultar findbar de manera permanente
                    setTimeout(establecerFindbarOculto, 1500);

                    // Restaurar la posición de lectura después de cargar el PDF
                    setTimeout(restaurarPosicionLectura, 2000);
                } catch (e) {
                    console.warn("No se pudo establecer comunicación con el visor de PDF:", e);
                }
            };

            // Activar la comparación de texto después de cargar
            setTimeout(() => { comparacionActiva = true; }, 2000);
        });

        // Guardar automáticamente cada 2 minutos
        setInterval(guardarProgreso, 120000);
    </script>
}