@{
    ViewData["Title"] = "Lector de PDF";
    var documento = ViewBag.Documento as ProyectoAmbiente.Models.DocumentoPDF;
    var progreso = ViewBag.Progreso as ProyectoAmbiente.Models.ProgresoMecanografia;
}

<!-- MAIN CONTENT -->
<div class="container-fluid">
    <div id="progresoData" style="display: none;">
        @Html.Raw(Json.Serialize(new
            {
                paginaActual = progreso?.PaginaActual ?? 1,
                fragmentoContexto = progreso?.FragmentoContexto ?? "",
                porcentajeCompletado = progreso?.PorcentajeCompletado ?? 0
            }))
    </div>
    @if (TempData["Message"] != null)
    {
        <div class="alert @TempData["AlertType"]">
            @TempData["Message"]
        </div>
    }
    <div style="display: flex; gap: var(--spacing-lg);">

        <!-- Columna izquierda: Área principal de lectura -->
        <div style="flex: 3; height: 80vh;">
            <iframe id="pdfViewer" src="~/lib/pdfjs/web/viewer.html?file=/PDFAdmin/ObtenerPDF/@documento.Id"
                    style="width: 100%; height: 100%; border: none;"></iframe>
        </div>

        <!-- Columna derecha: Notas y estadísticas -->
        <div style="flex: 1;">
            <!-- Notas del usuario -->
            <div class="card" style="background-color: var(--neutral-800); box-shadow: var(--shadow-lg); margin-bottom: var(--spacing-lg);">
                <div class="card-header" style="border-bottom: 1px solid var(--neutral-700); color: var(--neutral-100);">
                    Notas
                </div>
                <div class="card-body">
                    <div class="form-group">
                        <textarea id="userNotes" class="form-control" rows="10" placeholder="Escriba sus notas aquí..."
                                  style="background-color: var(--neutral-700); border-color: var(--neutral-600); color: var(--neutral-200); resize: none;">@(progreso?.TextoCompletado ?? "")</textarea>
                    </div>
                    <div class="action-center">
                        <button id="btnSaveProgress" class="btn btn-primary">Guardar progreso</button>
                    </div>
                </div>
            </div>

            <!-- Estadísticas -->
            <div class="card" style="background-color: var(--neutral-800); box-shadow: var(--shadow-lg);">
                <div class="card-header" style="border-bottom: 1px solid var(--neutral-700); color: var(--neutral-100);">
                    Estadísticas de lectura
                </div>
                <div class="card-body">
                    <div style="display: flex; gap: var(--spacing-md);">
                        <!-- Progreso -->
                        <div style="flex: 1;">
                            <div class="card" style="background-color: var(--neutral-700); box-shadow: var(--shadow-sm);">
                                <div class="card-body" style="text-align: center;">
                                    <p style="color: var(--neutral-300); font-size: var(--font-size-sm); margin-bottom: var(--spacing-xs);">Progreso</p>
                                    <p id="progresoLectura" style="color: var(--primary-color); font-size: var(--font-size-2xl); font-weight: bold; margin: 0;">
                                        @(progreso?.PorcentajeCompletado.ToString("F0") ?? "0")%
                                    </p>
                                </div>
                            </div>
                        </div>

                        <!-- Promedio de caracteres -->
                        <div style="flex: 1;">
                            <div class="card" style="background-color: var(--neutral-700); box-shadow: var(--shadow-sm);">
                                <div class="card-body" style="text-align: center;">
                                    <p style="color: var(--neutral-300); font-size: var(--font-size-sm); margin-bottom: var(--spacing-xs);">CPM</p>
                                    <p id="caracteresMinuto" style="color: var(--secondary-color); font-size: var(--font-size-2xl); font-weight: bold; margin: 0;">
                                        0
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Alertas -->
                    <div class="alert" style="margin-top: var(--spacing-md); padding: var(--spacing-md); border-radius: var(--border-radius-sm); border-left: 4px solid var(--info-color); background-color: rgba(52, 152, 219, 0.1); color: var(--info-color);">
                        <strong>Consejo:</strong> Toma descansos cada 25 minutos para mayor retención.
                    </div>
                </div>
                <div class="card-footer" style="background-color: var(--neutral-700); border-top: 1px solid var(--neutral-600);">
                    <span id="estadoGuardado" class="badge badge-primary">Guardado</span>
                    <span id="ultimaActualizacion" class="badge badge-neutral">Última actualización: @(progreso != null ? $"{(DateTime.Now - progreso.UltimaActualizacion).Minutes} min" : "Nunca")</span>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @* Asegúrate de incluir el token antiforgery para las peticiones AJAX *@
    @Html.AntiForgeryToken()

    <script>
        // Variables globales
        const documentoId = @documento.Id;
        const documentoNumPaginas = @documento.NumPaginas;

        // Contador de tiempo de lectura
        let tiempoInicio = new Date();
        let contadorCaracteres = 0;
        let actualizandoCPM = false;

        // Función para guardar el progreso
        function guardarProgreso() {
            const notas = document.getElementById('userNotes').value;
            const porcentaje = parseInt(document.getElementById('progresoLectura').innerText.replace('%', ''));

            // Obtener la página actual del iframe (si es posible)
            let paginaActual = 1;
            try {
                const pdfFrame = document.getElementById('pdfViewer');
                if (pdfFrame && pdfFrame.contentWindow) {
                    // Intentar obtener la página actual del visor PDF.js si está disponible
                    if (pdfFrame.contentWindow.PDFViewerApplication) {
                        paginaActual = pdfFrame.contentWindow.PDFViewerApplication.page || 1;
                    }
                }
            } catch (e) {
                console.warn("No se pudo obtener la página actual:", e);
            }

            // Preparar los datos para enviar
            const formData = new FormData();
            formData.append('documentoId', documentoId);
            formData.append('paginaActual', paginaActual);
            formData.append('indiceCaracter', 0);
            formData.append('posicionX', 0);
            formData.append('posicionY', 0);
            formData.append('elementoId', '');
            formData.append('fragmentoContexto', '');
            formData.append('porcentajeCompletado', porcentaje);
            formData.append('textoCompletado', notas);

            // Obtener el token antiforgery
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            // Enviar los datos al servidor
            fetch('/PDFAdmin/GuardarProgreso', {
                method: 'POST',
                body: formData,
                headers: {
                    'RequestVerificationToken': token
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        document.getElementById('estadoGuardado').innerText = 'Guardado';
                        document.getElementById('ultimaActualizacion').innerText = 'Última actualización: ahora';
                    } else {
                        console.error('Error al guardar:', data.message);
                        document.getElementById('estadoGuardado').innerText = 'Error al guardar';
                    }
                })
                .catch(error => {
                    console.error('Error en la petición:', error);
                    document.getElementById('estadoGuardado').innerText = 'Error al guardar';
                });
        }

        // Actualizar CPM (Caracteres por minuto)
        function actualizarCPM() {
            if (actualizandoCPM) return;

            actualizandoCPM = true;
            const ahora = new Date();
            const minutos = (ahora - tiempoInicio) / 60000; // Convertir ms a minutos

            if (minutos > 0) {
                const cpm = Math.round(contadorCaracteres / minutos);
                document.getElementById('caracteresMinuto').innerText = cpm;
            }

            actualizandoCPM = false;
        }

        // Función para buscar en el PDF cuando esté listo
        function buscarEnPDFCuandoEsteListoEsperaPolling(texto, pagina = null) {
            // Obtener referencia al iframe
            const pdfIframe = document.querySelector('iframe');

            if (!pdfIframe) {
                console.error('No se encontró el iframe del visor PDF');
                return;
            }

            // Función que verificará si el visor está listo
            const verificarCargaCompleta = function () {
                return new Promise((resolve) => {
                    let intentos = 0;
                    const maxIntentos = 30; // 30 segundos máximo de espera

                    const comprobar = setInterval(() => {
                        try {
                            // Verificar si podemos acceder al iframe
                            if (pdfIframe.contentDocument) {
                                // Verificar si los elementos clave están disponibles
                                const app = pdfIframe.contentWindow.PDFViewerApplication;
                                const findbtn = pdfIframe.contentDocument.getElementById('viewFindButton');
                                const pageInput = pdfIframe.contentDocument.getElementById('pageNumber');

                                // Si el visor parece estar listo
                                if (app && app.pdfDocument && findbtn && pageInput) {
                                    clearInterval(comprobar);
                                    resolve(true);
                                    return;
                                }
                            }
                        } catch (e) {
                            console.log("Aún esperando...", e);
                        }

                        intentos++;
                        if (intentos >= maxIntentos) {
                            clearInterval(comprobar);
                            console.error('Tiempo de espera agotado para cargar el visor PDF');
                            resolve(false);
                        }
                    }, 1000); // Verificar cada segundo
                });
            };

            // Esperar a que el visor esté listo y luego realizar la búsqueda
            verificarCargaCompleta().then(listo => {
                if (listo) {
                    console.log('Visor PDF listo. Iniciando búsqueda...');

                    try {
                        // Ir a la página especificada si se proporciona
                        if (pagina !== null) {
                            const pageInput = pdfIframe.contentDocument.getElementById('pageNumber');
                            pageInput.value = pagina;

                            // Crear y disparar un evento de cambio
                            const changeEvent = new Event('change', { bubbles: true });
                            pageInput.dispatchEvent(changeEvent);

                            // Dar tiempo para que se cargue la página
                            setTimeout(() => realizarBusqueda(), 500);
                        } else {
                            realizarBusqueda();
                        }

                        // Función para realizar la búsqueda
                        function realizarBusqueda() {
                            // Si no hay texto que buscar, salimos
                            if (!texto || texto.trim() === '') {
                                console.log('No hay texto que buscar');
                                return;
                            }

                            // 1. Abrir la barra de búsqueda
                            const findButton = pdfIframe.contentDocument.getElementById('viewFindButton');
                            findButton.click();

                            // 2. Esperar a que la barra de búsqueda esté visible
                            setTimeout(() => {
                                // 3. Establecer el texto de búsqueda
                                const findInput = pdfIframe.contentDocument.getElementById('findInput');
                                findInput.value = texto;

                                // 4. Disparar evento de entrada para activar la búsqueda
                                const inputEvent = new Event('input', { bubbles: true });
                                findInput.dispatchEvent(inputEvent);

                                // 5. Esperar a que se procese la búsqueda y hacer clic en "Siguiente"
                                setTimeout(() => {
                                    const findNextButton = pdfIframe.contentDocument.getElementById('findNextButton');
                                    findNextButton.click();

                                    console.log(`Búsqueda completada para: "${texto}"`);
                                }, 300);
                            }, 300);
                        }

                    } catch (error) {
                        console.error('Error al realizar la búsqueda:', error);
                    }
                } else {
                    console.error('No se pudo iniciar la búsqueda porque el visor PDF no está listo');
                }
            });
        }

        // Función para restaurar la posición del usuario
        function restaurarPosicionLectura() {
            // Obtener datos del progreso desde las variables de Razor
            const paginaActual = @(progreso?.PaginaActual ?? 1);
            const fragmentoContexto = "@(progreso?.FragmentoContexto ?? "")";

            // Verificar si tenemos un fragmento de contexto y página para buscar
            if (fragmentoContexto && fragmentoContexto.trim() !== '') {
                console.log(`Restaurando posición: Página ${paginaActual}, Texto: "${fragmentoContexto}"`);

                // Buscar el fragmento en la página correspondiente
                buscarEnPDFCuandoEsteListoEsperaPolling(fragmentoContexto, paginaActual);
            } else if (paginaActual > 1) {
                // Si no hay fragmento pero hay una página guardada, ir a esa página
                console.log(`Restaurando posición: Página ${paginaActual}`);
                buscarEnPDFCuandoEsteListoEsperaPolling("", paginaActual);
            } else {
                console.log('No hay suficiente información para restaurar la posición');
            }
        }

        // Event listeners
        document.addEventListener('DOMContentLoaded', function () {
            // Botón para guardar progreso
            document.getElementById('btnSaveProgress').addEventListener('click', guardarProgreso);

            // Contador de caracteres en las notas
            document.getElementById('userNotes').addEventListener('input', function (e) {
                contadorCaracteres = e.target.value.length;
                actualizarCPM();

                // Actualizar estado de guardado
                document.getElementById('estadoGuardado').innerText = 'Sin guardar';
            });

            // Actualizar CPM cada 30 segundos
            setInterval(actualizarCPM, 30000);

            // Intentar comunicarse con el iframe cuando esté cargado
            const pdfFrame = document.getElementById('pdfViewer');
            pdfFrame.onload = function () {
                try {
                    // Escuchar eventos de cambio de página si es posible
                    if (pdfFrame.contentWindow.PDFViewerApplication) {
                        pdfFrame.contentWindow.PDFViewerApplication.eventBus.on('pagechanging', function (evt) {
                            // Actualizar progreso basado en la página actual
                            const porcentaje = Math.round((evt.pageNumber / documentoNumPaginas) * 100);
                            document.getElementById('progresoLectura').innerText = porcentaje + '%';
                        });
                    }
                } catch (e) {
                    console.warn("No se pudo establecer comunicación con el visor de PDF:", e);
                }

                // Restaurar la posición de lectura después de cargar el PDF
                setTimeout(restaurarPosicionLectura, 1500);
            };
        });

        // Guardar automáticamente cada 2 minutos
        setInterval(guardarProgreso, 120000);
    </script>
}